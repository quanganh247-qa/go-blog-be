// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: pet.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPet = `-- name: CreatePet :one
INSERT INTO Pet (
    UserID,
    Name,
    Type,
    Breed,
    Age,
    Weight
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING petid, userid, name, type, breed, age, weight, gender, healthnotes, profileimage
`

type CreatePetParams struct {
	Userid pgtype.Int8    `json:"userid"`
	Name   string         `json:"name"`
	Type   string         `json:"type"`
	Breed  pgtype.Text    `json:"breed"`
	Age    pgtype.Int4    `json:"age"`
	Weight pgtype.Numeric `json:"weight"`
}

func (q *Queries) CreatePet(ctx context.Context, arg CreatePetParams) (Pet, error) {
	row := q.db.QueryRow(ctx, createPet,
		arg.Userid,
		arg.Name,
		arg.Type,
		arg.Breed,
		arg.Age,
		arg.Weight,
	)
	var i Pet
	err := row.Scan(
		&i.Petid,
		&i.Userid,
		&i.Name,
		&i.Type,
		&i.Breed,
		&i.Age,
		&i.Weight,
		&i.Gender,
		&i.Healthnotes,
		&i.Profileimage,
	)
	return i, err
}

const getPet = `-- name: GetPet :one
SELECT petid, userid, name, type, breed, age, weight, gender, healthnotes, profileimage FROM Pet
WHERE PetID = $1 LIMIT 1
`

func (q *Queries) GetPet(ctx context.Context, petid int64) (Pet, error) {
	row := q.db.QueryRow(ctx, getPet, petid)
	var i Pet
	err := row.Scan(
		&i.Petid,
		&i.Userid,
		&i.Name,
		&i.Type,
		&i.Breed,
		&i.Age,
		&i.Weight,
		&i.Gender,
		&i.Healthnotes,
		&i.Profileimage,
	)
	return i, err
}
