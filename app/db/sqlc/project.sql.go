// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: project.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
  username,
  name,
  description,
  created_at,
  updated_at
) VALUES (
  $1, $2, $3, now(), now()
) RETURNING id, name, description, created_at, updated_at, username
`

type CreateProjectParams struct {
	Username    string      `json:"username"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject, arg.Username, arg.Name, arg.Description)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :one
DELETE FROM projects WHERE id = $1 RETURNING id, name, description, created_at, updated_at, username
`

func (q *Queries) DeleteProject(ctx context.Context, id int64) (Project, error) {
	row := q.db.QueryRow(ctx, deleteProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
	)
	return i, err
}

const getProject = `-- name: GetProject :one
SELECT id, name, description, created_at, updated_at, username FROM projects WHERE id = $1
`

func (q *Queries) GetProject(ctx context.Context, id int64) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
	)
	return i, err
}

const getProjectsByUser = `-- name: GetProjectsByUser :many
SELECT id, name, description, created_at, updated_at, username FROM projects WHERE username = $1
`

func (q *Queries) GetProjectsByUser(ctx context.Context, username string) ([]Project, error) {
	rows, err := q.db.Query(ctx, getProjectsByUser, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET name = $2, 
description = $3, updated_at = now()
WHERE id = $1
RETURNING id, name, description, created_at, updated_at, username
`

type UpdateProjectParams struct {
	ID          int64       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject, arg.ID, arg.Name, arg.Description)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
	)
	return i, err
}
