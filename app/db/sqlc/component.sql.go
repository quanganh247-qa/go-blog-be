// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: component.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createComponents = `-- name: CreateComponents :one
INSERT INTO components (name, description, content , component_code,project_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, now(),now())
RETURNING id, project_id, name, created_at, updated_at, component_code, description, content, removed_at
`

type CreateComponentsParams struct {
	Name          string      `json:"name"`
	Description   pgtype.Text `json:"description"`
	Content       pgtype.Text `json:"content"`
	ComponentCode pgtype.Text `json:"component_code"`
	ProjectID     int32       `json:"project_id"`
}

func (q *Queries) CreateComponents(ctx context.Context, arg CreateComponentsParams) (Component, error) {
	row := q.db.QueryRow(ctx, createComponents,
		arg.Name,
		arg.Description,
		arg.Content,
		arg.ComponentCode,
		arg.ProjectID,
	)
	var i Component
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ComponentCode,
		&i.Description,
		&i.Content,
		&i.RemovedAt,
	)
	return i, err
}

const deleteComponents = `-- name: DeleteComponents :one
DELETE FROM components
WHERE id = $1
RETURNING id, project_id, name, created_at, updated_at, component_code, description, content, removed_at
`

func (q *Queries) DeleteComponents(ctx context.Context, id int64) (Component, error) {
	row := q.db.QueryRow(ctx, deleteComponents, id)
	var i Component
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ComponentCode,
		&i.Description,
		&i.Content,
		&i.RemovedAt,
	)
	return i, err
}

const getComponentsById = `-- name: GetComponentsById :one
SELECT id, project_id, name, created_at, updated_at, component_code, description, content, removed_at FROM components
WHERE id = $1 and project_id = $2 and removed_at is null
`

type GetComponentsByIdParams struct {
	ID        int64 `json:"id"`
	ProjectID int32 `json:"project_id"`
}

func (q *Queries) GetComponentsById(ctx context.Context, arg GetComponentsByIdParams) (Component, error) {
	row := q.db.QueryRow(ctx, getComponentsById, arg.ID, arg.ProjectID)
	var i Component
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ComponentCode,
		&i.Description,
		&i.Content,
		&i.RemovedAt,
	)
	return i, err
}

const getComponentsByName = `-- name: GetComponentsByName :one
SELECT id, project_id, name, created_at, updated_at, component_code, description, content, removed_at FROM components
WHERE name = $1
`

func (q *Queries) GetComponentsByName(ctx context.Context, name string) (Component, error) {
	row := q.db.QueryRow(ctx, getComponentsByName, name)
	var i Component
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ComponentCode,
		&i.Description,
		&i.Content,
		&i.RemovedAt,
	)
	return i, err
}

const getComponentss = `-- name: GetComponentss :many
SELECT id, project_id, name, created_at, updated_at, component_code, description, content, removed_at FROM components
`

func (q *Queries) GetComponentss(ctx context.Context) ([]Component, error) {
	rows, err := q.db.Query(ctx, getComponentss)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Component{}
	for rows.Next() {
		var i Component
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ComponentCode,
			&i.Description,
			&i.Content,
			&i.RemovedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComponents = `-- name: UpdateComponents :one
UPDATE components
SET name = $1, description = $2, updated_at = $3
WHERE id = $4
RETURNING id, project_id, name, created_at, updated_at, component_code, description, content, removed_at
`

type UpdateComponentsParams struct {
	Name        string             `json:"name"`
	Description pgtype.Text        `json:"description"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	ID          int64              `json:"id"`
}

func (q *Queries) UpdateComponents(ctx context.Context, arg UpdateComponentsParams) (Component, error) {
	row := q.db.QueryRow(ctx, updateComponents,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Component
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ComponentCode,
		&i.Description,
		&i.Content,
		&i.RemovedAt,
	)
	return i, err
}
