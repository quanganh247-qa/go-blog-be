// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: vaccination.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createVaccination = `-- name: CreateVaccination :one
INSERT INTO Vaccination (petid, vaccine_name, date_administered, next_due_date, vaccine_provider, batch_number, notes)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING vaccinationid, petid, vaccine_name, date_administered, next_due_date, vaccine_provider, batch_number, notes
`

type CreateVaccinationParams struct {
	Petid            pgtype.Int8      `json:"petid"`
	VaccineName      string           `json:"vaccine_name"`
	DateAdministered pgtype.Timestamp `json:"date_administered"`
	NextDueDate      pgtype.Timestamp `json:"next_due_date"`
	VaccineProvider  pgtype.Text      `json:"vaccine_provider"`
	BatchNumber      pgtype.Text      `json:"batch_number"`
	Notes            pgtype.Text      `json:"notes"`
}

func (q *Queries) CreateVaccination(ctx context.Context, arg CreateVaccinationParams) (Vaccination, error) {
	row := q.db.QueryRow(ctx, createVaccination,
		arg.Petid,
		arg.VaccineName,
		arg.DateAdministered,
		arg.NextDueDate,
		arg.VaccineProvider,
		arg.BatchNumber,
		arg.Notes,
	)
	var i Vaccination
	err := row.Scan(
		&i.Vaccinationid,
		&i.Petid,
		&i.VaccineName,
		&i.DateAdministered,
		&i.NextDueDate,
		&i.VaccineProvider,
		&i.BatchNumber,
		&i.Notes,
	)
	return i, err
}

const deleteVaccination = `-- name: DeleteVaccination :exec
DELETE FROM Vaccination
WHERE vaccinationid = $1
`

func (q *Queries) DeleteVaccination(ctx context.Context, vaccinationid int64) error {
	_, err := q.db.Exec(ctx, deleteVaccination, vaccinationid)
	return err
}

const getVaccinationByID = `-- name: GetVaccinationByID :one
SELECT vaccinationid, petid, vaccine_name, date_administered, next_due_date, vaccine_provider, batch_number, notes
FROM Vaccination
WHERE vaccinationid = $1
`

func (q *Queries) GetVaccinationByID(ctx context.Context, vaccinationid int64) (Vaccination, error) {
	row := q.db.QueryRow(ctx, getVaccinationByID, vaccinationid)
	var i Vaccination
	err := row.Scan(
		&i.Vaccinationid,
		&i.Petid,
		&i.VaccineName,
		&i.DateAdministered,
		&i.NextDueDate,
		&i.VaccineProvider,
		&i.BatchNumber,
		&i.Notes,
	)
	return i, err
}

const listVaccinationsByPetID = `-- name: ListVaccinationsByPetID :many
SELECT vaccinationid, petid, vaccine_name, date_administered, next_due_date, vaccine_provider, batch_number, notes
FROM Vaccination
WHERE petid = $1
ORDER BY date_administered DESC
`

func (q *Queries) ListVaccinationsByPetID(ctx context.Context, petid pgtype.Int8) ([]Vaccination, error) {
	rows, err := q.db.Query(ctx, listVaccinationsByPetID, petid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Vaccination{}
	for rows.Next() {
		var i Vaccination
		if err := rows.Scan(
			&i.Vaccinationid,
			&i.Petid,
			&i.VaccineName,
			&i.DateAdministered,
			&i.NextDueDate,
			&i.VaccineProvider,
			&i.BatchNumber,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVaccination = `-- name: UpdateVaccination :exec
UPDATE Vaccination
SET vaccine_name = $2,
    date_administered = $3,
    next_due_date = $4,
    vaccine_provider = $5,
    batch_number = $6,
    notes = $7
WHERE vaccinationid = $1
`

type UpdateVaccinationParams struct {
	Vaccinationid    int64            `json:"vaccinationid"`
	VaccineName      string           `json:"vaccine_name"`
	DateAdministered pgtype.Timestamp `json:"date_administered"`
	NextDueDate      pgtype.Timestamp `json:"next_due_date"`
	VaccineProvider  pgtype.Text      `json:"vaccine_provider"`
	BatchNumber      pgtype.Text      `json:"batch_number"`
	Notes            pgtype.Text      `json:"notes"`
}

func (q *Queries) UpdateVaccination(ctx context.Context, arg UpdateVaccinationParams) error {
	_, err := q.db.Exec(ctx, updateVaccination,
		arg.Vaccinationid,
		arg.VaccineName,
		arg.DateAdministered,
		arg.NextDueDate,
		arg.VaccineProvider,
		arg.BatchNumber,
		arg.Notes,
	)
	return err
}
