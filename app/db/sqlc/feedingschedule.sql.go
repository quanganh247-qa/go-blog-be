// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: feedingschedule.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFeedingSchedule = `-- name: CreateFeedingSchedule :one
INSERT INTO FeedingSchedule (petid, meal_time, food_type, quantity, frequency, lastfed, notes, is_active)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING feeding_schedule_id, petid, meal_time, food_type, quantity, frequency, lastfed, notes, is_active
`

type CreateFeedingScheduleParams struct {
	Petid     pgtype.Int8      `json:"petid"`
	MealTime  pgtype.Time      `json:"meal_time"`
	FoodType  string           `json:"food_type"`
	Quantity  float64          `json:"quantity"`
	Frequency string           `json:"frequency"`
	Lastfed   pgtype.Timestamp `json:"lastfed"`
	Notes     pgtype.Text      `json:"notes"`
	IsActive  pgtype.Bool      `json:"is_active"`
}

func (q *Queries) CreateFeedingSchedule(ctx context.Context, arg CreateFeedingScheduleParams) (Feedingschedule, error) {
	row := q.db.QueryRow(ctx, createFeedingSchedule,
		arg.Petid,
		arg.MealTime,
		arg.FoodType,
		arg.Quantity,
		arg.Frequency,
		arg.Lastfed,
		arg.Notes,
		arg.IsActive,
	)
	var i Feedingschedule
	err := row.Scan(
		&i.FeedingScheduleID,
		&i.Petid,
		&i.MealTime,
		&i.FoodType,
		&i.Quantity,
		&i.Frequency,
		&i.Lastfed,
		&i.Notes,
		&i.IsActive,
	)
	return i, err
}

const deleteFeedingSchedule = `-- name: DeleteFeedingSchedule :exec
DELETE FROM FeedingSchedule
WHERE feeding_schedule_id = $1
`

func (q *Queries) DeleteFeedingSchedule(ctx context.Context, feedingScheduleID int64) error {
	_, err := q.db.Exec(ctx, deleteFeedingSchedule, feedingScheduleID)
	return err
}

const getFeedingScheduleByPetID = `-- name: GetFeedingScheduleByPetID :many
SELECT feeding_schedule_id, petid, meal_time, food_type, quantity, frequency, lastfed, notes, is_active
FROM FeedingSchedule
WHERE petid = $1
ORDER BY feeding_schedule_id
`

func (q *Queries) GetFeedingScheduleByPetID(ctx context.Context, petid pgtype.Int8) ([]Feedingschedule, error) {
	rows, err := q.db.Query(ctx, getFeedingScheduleByPetID, petid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Feedingschedule{}
	for rows.Next() {
		var i Feedingschedule
		if err := rows.Scan(
			&i.FeedingScheduleID,
			&i.Petid,
			&i.MealTime,
			&i.FoodType,
			&i.Quantity,
			&i.Frequency,
			&i.Lastfed,
			&i.Notes,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActiveFeedingSchedules = `-- name: ListActiveFeedingSchedules :many
SELECT feeding_schedule_id, petid, meal_time, food_type, quantity, frequency, lastfed, notes, is_active
FROM FeedingSchedule
WHERE is_active = true
ORDER BY petid
`

func (q *Queries) ListActiveFeedingSchedules(ctx context.Context) ([]Feedingschedule, error) {
	rows, err := q.db.Query(ctx, listActiveFeedingSchedules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Feedingschedule{}
	for rows.Next() {
		var i Feedingschedule
		if err := rows.Scan(
			&i.FeedingScheduleID,
			&i.Petid,
			&i.MealTime,
			&i.FoodType,
			&i.Quantity,
			&i.Frequency,
			&i.Lastfed,
			&i.Notes,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFeedingSchedule = `-- name: UpdateFeedingSchedule :exec
UPDATE FeedingSchedule
SET meal_time = $2, food_type = $3, quantity = $4, frequency = $5, lastfed = $6, notes = $7, is_active = $8
WHERE feeding_schedule_id = $1
`

type UpdateFeedingScheduleParams struct {
	FeedingScheduleID int64            `json:"feeding_schedule_id"`
	MealTime          pgtype.Time      `json:"meal_time"`
	FoodType          string           `json:"food_type"`
	Quantity          float64          `json:"quantity"`
	Frequency         string           `json:"frequency"`
	Lastfed           pgtype.Timestamp `json:"lastfed"`
	Notes             pgtype.Text      `json:"notes"`
	IsActive          pgtype.Bool      `json:"is_active"`
}

func (q *Queries) UpdateFeedingSchedule(ctx context.Context, arg UpdateFeedingScheduleParams) error {
	_, err := q.db.Exec(ctx, updateFeedingSchedule,
		arg.FeedingScheduleID,
		arg.MealTime,
		arg.FoodType,
		arg.Quantity,
		arg.Frequency,
		arg.Lastfed,
		arg.Notes,
		arg.IsActive,
	)
	return err
}
