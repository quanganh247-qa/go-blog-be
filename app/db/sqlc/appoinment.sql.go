// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: appoinment.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAppointment = `-- name: CreateAppointment :one
INSERT INTO Appointment (
    doctor_id,
    petid,
    service_id,
    time_slot_id,
    status
) VALUES (
    $1, $2, $3, $4, 'pending'
<<<<<<< HEAD
<<<<<<< HEAD
) RETURNING appointment_id, petid, doctor_id, service_id, date, status, notes, reminder_send, time_slot_id, created_at
=======
) RETURNING appointment_id, petid, doctor_id, service_id, date, status, notes, reminder_send, time_slot_id
>>>>>>> 59d4ef2 (modify type of filed in dtb)
=======
) RETURNING appointment_id, petid, doctor_id, service_id, date, status, notes, reminder_send, time_slot_id, created_at
>>>>>>> 7cfffa9 (update dtb and appointment)
`

type CreateAppointmentParams struct {
	DoctorID   pgtype.Int8 `json:"doctor_id"`
	Petid      pgtype.Int8 `json:"petid"`
	ServiceID  pgtype.Int8 `json:"service_id"`
	TimeSlotID pgtype.Int8 `json:"time_slot_id"`
}

func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, createAppointment,
		arg.DoctorID,
		arg.Petid,
		arg.ServiceID,
		arg.TimeSlotID,
	)
	var i Appointment
	err := row.Scan(
		&i.AppointmentID,
		&i.Petid,
		&i.DoctorID,
		&i.ServiceID,
		&i.Date,
		&i.Status,
		&i.Notes,
		&i.ReminderSend,
		&i.TimeSlotID,
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 7cfffa9 (update dtb and appointment)
		&i.CreatedAt,
	)
	return i, err
}

<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 4b8e9b6 (update appointment api)
const getAppointmentsOfDoctorWithDetails = `-- name: GetAppointmentsOfDoctorWithDetails :many
SELECT 
    a.appointment_id as appointment_id,
    p.name as pet_name,
    s.name as service_name,
    ts.start_time,
    ts.end_time
FROM Appointment a
    LEFT JOIN Doctors d ON a.doctor_id = d.id
    LEFT JOIN Pet p ON a.petid = p.petid
    LEFT JOIN Service s ON a.service_id = s.serviceid
    LEFT JOIN TimeSlots ts ON a.time_slot_id = ts.id
WHERE d.id = $1
AND LOWER(a.status) <> 'completed'
ORDER BY ts.start_time ASC
<<<<<<< HEAD
`

type GetAppointmentsOfDoctorWithDetailsRow struct {
	AppointmentID int64            `json:"appointment_id"`
	PetName       pgtype.Text      `json:"pet_name"`
	ServiceName   pgtype.Text      `json:"service_name"`
	StartTime     pgtype.Timestamp `json:"start_time"`
	EndTime       pgtype.Timestamp `json:"end_time"`
}

func (q *Queries) GetAppointmentsOfDoctorWithDetails(ctx context.Context, id int64) ([]GetAppointmentsOfDoctorWithDetailsRow, error) {
	rows, err := q.db.Query(ctx, getAppointmentsOfDoctorWithDetails, id)
=======
const getAppointmentsOfDoctor = `-- name: GetAppointmentsOfDoctor :many
SELECT appointment_id, petid, doctor_id, service_id, date, status, notes, reminder_send, time_slot_id, created_at, id, user_id, specialization, years_of_experience, education, certificate_number, bio, consultation_fee FROM Appointment as a
left join Doctors as d on a.doctor_id = d.id
WHERE d.id = $1 and a.status <> 'completed'
=======
>>>>>>> 4b8e9b6 (update appointment api)
`

type GetAppointmentsOfDoctorWithDetailsRow struct {
	AppointmentID int64            `json:"appointment_id"`
	PetName       pgtype.Text      `json:"pet_name"`
	ServiceName   pgtype.Text      `json:"service_name"`
	StartTime     pgtype.Timestamp `json:"start_time"`
	EndTime       pgtype.Timestamp `json:"end_time"`
}

<<<<<<< HEAD
func (q *Queries) GetAppointmentsOfDoctor(ctx context.Context, id int64) ([]GetAppointmentsOfDoctorRow, error) {
	rows, err := q.db.Query(ctx, getAppointmentsOfDoctor, id)
>>>>>>> 7cfffa9 (update dtb and appointment)
=======
func (q *Queries) GetAppointmentsOfDoctorWithDetails(ctx context.Context, id int64) ([]GetAppointmentsOfDoctorWithDetailsRow, error) {
	rows, err := q.db.Query(ctx, getAppointmentsOfDoctorWithDetails, id)
>>>>>>> 4b8e9b6 (update appointment api)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
<<<<<<< HEAD
<<<<<<< HEAD
	items := []GetAppointmentsOfDoctorWithDetailsRow{}
	for rows.Next() {
		var i GetAppointmentsOfDoctorWithDetailsRow
		if err := rows.Scan(
			&i.AppointmentID,
			&i.PetName,
			&i.ServiceName,
			&i.StartTime,
			&i.EndTime,
=======
	items := []GetAppointmentsOfDoctorRow{}
=======
	items := []GetAppointmentsOfDoctorWithDetailsRow{}
>>>>>>> 4b8e9b6 (update appointment api)
	for rows.Next() {
		var i GetAppointmentsOfDoctorWithDetailsRow
		if err := rows.Scan(
			&i.AppointmentID,
<<<<<<< HEAD
			&i.Petid,
			&i.DoctorID,
			&i.ServiceID,
			&i.Date,
			&i.Status,
			&i.Notes,
			&i.ReminderSend,
			&i.TimeSlotID,
			&i.CreatedAt,
			&i.ID,
			&i.UserID,
			&i.Specialization,
			&i.YearsOfExperience,
			&i.Education,
			&i.CertificateNumber,
			&i.Bio,
			&i.ConsultationFee,
>>>>>>> 7cfffa9 (update dtb and appointment)
=======
			&i.PetName,
			&i.ServiceName,
			&i.StartTime,
			&i.EndTime,
>>>>>>> 4b8e9b6 (update appointment api)
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAppointmentStatus = `-- name: UpdateAppointmentStatus :exec
UPDATE Appointment
SET status = $2
WHERE appointment_id = $1
`

type UpdateAppointmentStatusParams struct {
	AppointmentID int64       `json:"appointment_id"`
	Status        pgtype.Text `json:"status"`
}

func (q *Queries) UpdateAppointmentStatus(ctx context.Context, arg UpdateAppointmentStatusParams) error {
	_, err := q.db.Exec(ctx, updateAppointmentStatus, arg.AppointmentID, arg.Status)
	return err
}

const updateNotification = `-- name: UpdateNotification :exec
UPDATE Appointment
SET reminder_send = true
WHERE appointment_id = $1
`

func (q *Queries) UpdateNotification(ctx context.Context, appointmentID int64) error {
	_, err := q.db.Exec(ctx, updateNotification, appointmentID)
	return err
}
<<<<<<< HEAD
=======
	)
	return i, err
}
>>>>>>> 59d4ef2 (modify type of filed in dtb)
=======
>>>>>>> 7cfffa9 (update dtb and appointment)
